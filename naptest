#!/usr/bin/python3
#naptest- not another pentest!

import sys,sqlite3 as lite,os,argparse,ast
import json
#import template renderer
from utils.renderer import load_paths_json, render_cmd, LEGACY_KEYS


parser = argparse.ArgumentParser(prog='naptest')
subparsers = parser.add_subparsers(help='sub-command help')

parser_scope = subparsers.add_parser('scope', help="scope mode will create a list of IPs from a list of ranges.")
parser_scope.set_defaults(dest="scope")
parser_scope.add_argument("input", help="File containing scope")
parser_scope.add_argument("-p" , "--print", help="Print the IPs in scope", action="store_true")
parser_scope.add_argument("-o", "--output", help="directory for output", default="./")
parser_scope.add_argument("-e", "--exclude", help="IPs to exclude. Comma separated.")
parser_scope.add_argument("-a", "--autoexclude", help="Automatically exclude all your IPs (from all interfaces).", action="store_true")

parser_scan = subparsers.add_parser('scan', help="scan mode will attempt to identify and scan in scope hosts. By default it will arp-scan any local IPs, perform an nmap host discovery scan, and then a top20 port TCP scan.")
parser_scan.set_defaults(dest="scan")
parser_scan.add_argument("-o", "--output", help="directory for output", default="./")
parser_scan.add_argument("-p", "--parallel", help="number of scans to run in parallel", type=int, default="10")
parser_scan.add_argument("--no-discovery", help="skip discovery scans and fully nmap scan every in scope address", default=False, action="store_true")

parser_parse = subparsers.add_parser('parse', help="parse mode will generate output based on completed nmap scans.")
parser_parse.add_argument("xml", help="directory containing nmap output")
parser_parse.add_argument("-o", "--output", help="directory for output", default="./")
parser_parse.set_defaults(dest="parse")

parser_status = subparsers.add_parser('status', help="status mode will show you the status of nmap scans.")
parser_status.add_argument("directory", help="directory containing nmap output")
parser_status.set_defaults(dest="status")

parser_test = subparsers.add_parser('test', help="test mode runs pre-defined tools against the identified services in scope.")
parser_test.add_argument("--guesshttp", help="Attempt to work out if any unknown services are actually HTTP/S endpoints", default=False, action="store_true")
parser_test.add_argument("-o", "--output", help="directory for output", default="./")
parser_test.add_argument("-c", "--check", default=False, action='store_true', help="checks if all tools are available in $PATH")
parser_test.add_argument("directory", help="directory containing the services.array")
parser_test.set_defaults(dest="test")

global args
args = parser.parse_args()

#Magic Variables
dbfile="naptest.db"
svcarrayfile="services.array"
svcfolder="services"

def get_system_ips():
        import ipaddress,netifaces as ni
        ips = {}
        for nic in ni.interfaces():
                try:
                        ip =    ni.ifaddresses(nic)[ni.AF_INET][0]['addr']
                        ips[ip] = nic
                except:
                        pass
        return ips


def db_connect():
        con = lite.connect(db)
        cur = con.cursor()
        cur.execute("SELECT name FROM sqlite_schema WHERE type='table' ORDER BY name;")
        tables = cur.fetchall()
        if not tables:
                #try:
                cur.execute("CREATE TABLE scope (ip varchar(16), network varchar(19), live integer(1) default 0, excluded integer(1) default 0, arpscan integer(1) default 0, discoveryscan integer(1) default 0, top20scan integer(1) default 0, nmapprocessed integer(1) default 0, fulltcpscan integer(1) default 0, fulludpscan integer(1) default 0);")
                cur.execute("CREATE TABLE openports (ip varchar(16), port integer(5), protocol varchar(3), service varchar(100), tunnel varchar(4), version varchar(100));")
                cur.execute("CREATE TABLE closedports (ip varchar(16), port integer(5), range varchar(100), protocol varchar(3));")
                cur.execute("CREATE TABLE hostnames (hostname varchar(500), ip varchar(16));")
                cur.execute("CREATE TABLE osmatch (name varchar(100), accuracy int(3), ip varchar(16));")
                cur.execute("CREATE TABLE scripts (id varchar(100), ip varchar(16), port integer(5), output varchar(512));")
                cur.execute("CREATE UNIQUE INDEX scopedip ON scope (ip);")
                cur.execute("CREATE UNIQUE INDEX opencheck ON openports (ip,port,protocol);")
                cur.execute("CREATE UNIQUE INDEX closedcheckip ON closedports (ip,port,protocol);")
                cur.execute("CREATE UNIQUE INDEX closedcheckrange ON closedports (ip,range,protocol);")
                cur.execute("CREATE UNIQUE INDEX scriptcheck ON scripts (id,ip,port);")
                cur.execute("CREATE UNIQUE INDEX hostnamecheck ON hostnames (hostname,ip);")
                cur.execute("CREATE UNIQUE INDEX osmatchcheck ON osmatch (name,accuracy,ip);")
                #except Exception as e:
                #        print(e)
        return con

def scope_generator(file):
        import ipaddress
        exclusions = []
        if args.autoexclude:
                exclusions += list(get_system_ips().keys())
        con = db_connect()
        cur = con.cursor()
        f = open(file,'r')
        scope = f.readlines()
        f.close()
        scope_ips = []
        if args.exclude:
                exclusions += args.exclude.split(',')
        scoped_ips = 0
        excluded_ips = 0
        for line in scope:
                scoped = line.strip()
                network = ipaddress.ip_network(scoped, strict=False)
                for ip in network:
                        excluded = 0
                        if str(ip) not in exclusions:
                                scope_ips.append(ip)
                                scoped_ips += 1
                        else:
                                excluded = 1
                                excluded_ips += 1
                        try:
                                cur.execute("INSERT INTO scope (ip,network,excluded) values (?,?,?)",(str(ip),str(network),excluded))
                        except Exception as error:
                                pass
                for ip in exclusions:
                        cur.execute("UPDATE  scope set excluded = 1 where ip = ?",(str(ip),))
        print("[+] "+str(scoped_ips)+" in scope IPs. "+str(excluded_ips)+" exclusions are present.")

        con.commit()
        if args.print:
                cur.execute("select ip from scope where excluded=0")
                ips = []
                ips += [x[0] for x in cur.fetchall()]
                for ip in ips:
                        print(ip)
        con.close()

def findlocalranges():
        import ipaddress
        con = db_connect()
        cur = con.cursor()
        #cur.row_factory = str
        cur.execute("select distinct network from scope;")
        networks = cur.fetchall()
        systemips = get_system_ips()
        results = {}
        for ip in systemips.keys():
                ip = "".join(ip)
                for network in networks:
                        network = "".join(network)
                        if ipaddress.ip_address(ip) in ipaddress.ip_network(network):
                                interface = systemips[ip]
                                results[interface] = network
        return results
        con.close()

def settrue(ip,column):
        con = db_connect()
        cur = con.cursor()
        cur.execute("UPDATE scope set "+column+" = 1 where ip = ?",(ip,))
        con.commit()
        con.close()

def arpscan(targets):
        for interface,network in targets.items():
                con = db_connect()
                cur = con.cursor()
                cur.execute("select ip from scope where network = ? and excluded != 1 and arpscan = 0;",(str(network),))
                ips = []
                ips += [x[0] for x in cur.fetchall()]
                con.close()
                if not ips:
                        print("[+] no hosts require arp-scans")
                        return
                print("[+] Performing arp-scan of scoped hosts in "+network+" from "+interface)
                scan = os.popen("arp-scan -r 2 -x -g --format='${ip}' --bandwidth=25K -I "+interface+" --file=<(printf \""+"\n".join(ips)+"\")")
                output = scan.readlines()
                for line in output:
                        ip = line.strip()
                        settrue(ip,"live")
                for ip in ips:
                        settrue(ip,"arpscan")
                print("[*] "+str(len(output))+" live hosts found out of "+str(len(ips)))

def discoveryscan():
        import ipaddress
        con = db_connect()
        cur = con.cursor()
        cur.execute("select ip from scope where live = 0 and excluded != 1 and discoveryscan = 0;")
        ips = []
        ips += [x[0] for x in cur.fetchall()]
        con.close()
        if not ips:
                print("[+] no hosts require host discovery")
                return
        print("[+] Performing nmap host discovery scan of "+str(len(ips))+" ips")
        scan = os.popen("nmap -n -sn -iL=<(printf \""+"\n".join(ips)+"\")")
        output = scan.readlines()
        newliveips = 0
        for line in output:
                if line.startswith("Nmap scan report for "):
                        words = line.split(" ")
                        for word in words:
                                try:
                                        ip = word.strip()
                                        ipaddress.ip_address(ip)
                                        settrue(ip,"live")
                                        newliveips += 1
                                except Exception as e:
                                        pass
        for ip in ips:
                settrue(ip,"discoveryscan")
        print("[*] "+str(newliveips)+" live hosts found")

def nmap(command, target, scantype, outfile):
        import ipaddress
        scan = os.popen(command)
        output = scan.readlines()
        newliveips = 0
        if scantype == "top20scan":
                for line in output:
                        if line.startswith("Nmap scan report for "):
                                words = line.split(" ")
                                for word in words:
                                        try:
                                                ip = word.strip()
                                                ipaddress.ip_address(ip)
                                                settrue(ip,"live")
                                                newliveips += 1
                                        except Exception as e:
                                                pass
        settrue(target,scantype)
        if scantype in ["fulltcpscan","fulludpscan"]:
                xmlimport(outfile+".xml")
        return newliveips
        

def top20scan():
        from multiprocessing.pool import ThreadPool
        import time
        if os.geteuid() != 0:
                print("[!] nmap top20 scan requires root privileges")
                exit(1)
        con = db_connect()
        cur = con.cursor()
        cur.execute("select ip from scope where live=0 and top20scan=0 and excluded=0;")
        ips = []
        ips += [x[0] for x in cur.fetchall()]
        con.close()
        if not ips:
                print("[+] no hosts require top20 scans")
                return
        commands = []
        for ip in ips:
                commands.append(("nmap -n -Pn -T4 -sS --top-ports 20 "+ip, ip))
        num = args.parallel
        tp = ThreadPool(num)
        print("[+] "+str(num)+" parallel nmap top20 scans running. "+str(len(commands))+" scans in total.")
        results = []
        for command,target in commands:
                tp.apply_async(nmap, (command,target,"top20scan",None),callback=results.append)
        tp.close()
        while True:
                if len(results) == len(commands):
                        break
                print("[*] "+str(len(results))+" scans completed. "+str(sum(results))+" live ips found", end="\r")
                time.sleep(1)
        tp.join()
        print("[*] completed "+str(len(commands))+" scans")


def fullnmapscan(targets):
        from multiprocessing.pool import ThreadPool
        import time
        if os.geteuid() != 0:
                print("[!] nmap full scan requires root privileges")
                exit(1)
        nmapdir = os.path.join(args.output,"nmap")
        try:
                os.mkdir(nmapdir)
        except:
                pass
        con = db_connect()
        cur = con.cursor()
        if targets == "live":
                live = "1"
                cur.execute("select ip from scope where live="+live+" and fulltcpscan=0 and fulludpscan=0 excluded=0;")
        elif targets == "notlive":
                live = "0"
                cur.execute("select ip from scope where live="+live+" and fulltcpscan=0 and fulludpscan=0 and excluded=0;")
        elif targets == "all":
                cur.execute("select ip from scope where fulltcpscan=0 and fulludpscan=0 and excluded=0;")
        ips = []
        ips += [x[0] for x in cur.fetchall()]
        con.close()
        if not ips:
                print("[+] no hosts require full nmap scans")
                return
        tcpcommands = []
        udpcommands = []
        for ip in ips:
                tcpfile = os.path.join(nmapdir,"nmap.tcp."+ip)
                udpfile = os.path.join(nmapdir,"nmap.udp."+ip)
                tcpcommands.append(("nmap -vvv -d -d    -Pn -p- -sS -sV -O -T4 -oA "+tcpfile+" --max-retries 3 "+ip+" > /dev/null 2>&1",ip,"fulltcpscan",tcpfile))
                #Fix character escaping, my terminal no like this? 
                udpcommands.append(("nmap -vvv -d -d -Pn -p $(grep \"^Probe UDP\" -A 2 /usr/share/nmap/nmap-service-probes| grep -v \"rarity\\|Probe\\|--\"| cut -f2 -d \" \" | grep \"^[0-9]\"| tr \",\" \"\\n\" | sort | uniq| tr \"\\n\" \",\") -sU -T4 -oA " + udpfile + " " + ip + " > /dev/null 2>&1", ip, "fulludpscan", udpfile))
        commands = tcpcommands + udpcommands
        num = args.parallel
        tp = ThreadPool(num)
        print("[+] "+str(num)+" parallel nmap full scans running. "+str(len(commands))+" scans in total.")
        results = []
        for command,target,scantype,outfile in commands:
                tp.apply_async(nmap, (command,target,scantype,outfile),callback=results.append)
        tp.close()
        nmap_xml_monitor(nmapdir)
        tp.join()
        #for ip in ips:
        #        settrue(ip,"fullnmapscan")
        print("[*] completed "+str(len(commands))+" scans")

def nmap_xml_monitor(nmapdir):
        import re
        import xml.etree.ElementTree as ET
        import datetime,time,random
        directory = os.path.join(nmapdir)
        outputlen = 0
        round = 0
        nmap_status = {}
        while True:
                output = []
                if os.path.isdir(directory):
                        for xmlfile in os.listdir(directory):
                                if xmlfile.endswith('.xml'):
                                        f = open(os.path.join(directory,xmlfile), 'r')
                                        lastlines = f.read().splitlines()[-3:]
                                        f.close()
                                        nmap_status[xmlfile] = {}
                                        status = ""
                                        if lastlines:
                                             lastline = lastlines[-1:][0]
                                        if lastline == "</nmaprun>":
                                                stats = "".join(lastlines[0:2])
                                                root = ET.fromstring(stats)
                                                hosts = root.find('hosts')
                                                up = hosts.attrib['up']
                                                total = hosts.attrib['total']
                                                status = "Completed"
                                                details = {'up':up,'total':total}
                                        else:
                                                lastlines.reverse()
                                                for lastline in lastlines:
                                                        try:
                                                                if "taskprogress" in lastline or "taskbegin" in lastline:
                                                                        details = {}
                                                                        root = ET.fromstring(lastline)
                                                                        status = "In Progress"
                                                                        for name,value in root.attrib.items():
                                                                                if name in ["time","etc"]:
                                                                                        value = datetime.datetime.fromtimestamp(int(value))
                                                                                details[name] = value
                                                                        break
                                                        except:
                                                                details = {}
                                                                status = "Running"
                                        nmap_status[xmlfile] = {'status':status,'details':details}
                        # Print the recovered data for troubleshooting
                        #for key,values in nmap_status.items():
                                #output.append(key+":"+str(values))
                        
                        completed = []
                        livehosts = 0
                        scannedhosts = 0
                        inprogress = {}
                        running = []
                        for scan,values in nmap_status.items():
                                status = values['status']
                                details = values['details']
                                if status == "Completed":
                                        completed.append(scan)
                                        livehosts = livehosts + int(details['up'])
                                        scannedhosts = scannedhosts + int(details['total'])
                                if status == "In Progress":
                                        try:
                                                etc = details['etc']
                                                inprogress[etc] = scan
                                        except:
                                                etc = datetime.datetime.fromtimestamp(99999999999+random.randint(0,9999))
                                                inprogress[etc] = scan
                                                #status = "Running"
                                if status == "Running":
                                        running.append(scan)
                        output.append(str(len(completed))+" completed scans have found "+str(livehosts)+"/"+str(scannedhosts)+" live hosts.")
                        if inprogress:
                                now = datetime.datetime.now()
                                etclist = list(inprogress.keys())
                                etclist.sort()
                                previndex = 0
                                for i,etc in enumerate(etclist):
                                        topindex = i
                                        timeremaining = etc - now
                                        if timeremaining.total_seconds() < 0:
                                                timeremaining = "Now"
                                        elif timeremaining.total_seconds() > datetime.timedelta(days=365).total_seconds():
                                                timeremaining = " No etc"
                                        output.append(str(timeremaining).split(".")[0]+": "+inprogress[etc]+" ("+nmap_status[inprogress[etc]]['details']['task']+")")

                        if running:
                                for r in running:
                                        output.append(r)
                        if round != 0:
                                if len(running) == 0 and len(inprogress) == 0:
                                        return
                                #for _ in range(len(running) + len(inprogress) + 1):
                                for _ in range(outputlen):
                                        sys.stdout.write("\x1b[1A\x1b[2K") # move up cursor and delete whole line
                        print("\n".join(output))
                        outputlen = len(output)
                        round += 1
                        time.sleep(2)


def closedports_to_ports_list(closedports):
        clist = []
        qlist = closedports.split(",")
        for i in qlist:
                iint = False
                try:
                        int(i)
                        iint = True
                except:
                        pass
                if iint is True:
                        clist.append(i)
                else:
                        start=int(i.split("-")[0])
                        end=int(i.split("-")[1])
                        for i in range(start,end+1):
                                clist.append(i)
        return clist



def xmlimport(xmlfile):
        import xml.etree.ElementTree as ET
        con = db_connect()
        cur = con.cursor()
        cur.row_factory = lambda cursor, row: row[0]

        try:
                tree = ET.ElementTree(file = xmlfile)
                root = tree.getroot()
        except:
                print("[!] Error parsing XML from: "+xmlfile)
                return


        # Loop through and pull out the data for the db

        # Get IP Address and hostnames
        for host in root.iterfind('host'):
                ip = host.find("./address").attrib['addr']
                hostname = []
                try:
                        for name in host.find("./hostnames"):
                                hostname.append(name.attrib['name'])
                except:
                        pass
                osmatch =[]
                try:
                        for match in host.findall("./os/osmatch"):
                                name = match.attrib['name']
                                accuracy = match.attrib['accuracy']
                                osmatch.append((name,accuracy))
                except:
                        pass
                cur.execute("UPDATE scope set nmapprocessed = 1 where ip = ?",(ip,))
        
                # Identifies batches of closed ports        
                for extraport in host.findall("./ports/extraports"):
                        if extraport.attrib['state'] == "closed":
                                closed_protocol=extraport.find("./extrareasons").attrib['proto']
                                closed_ports=extraport.find("./extrareasons").attrib['ports']
                                closedport_list = closedports_to_ports_list(closed_ports)
                                if closed_protocol != "udp":
                                        for port in closedport_list:
                                                try:
                                                        cur.execute("INSERT INTO closedports (ip,protocol,port) values (?,?,?)",(ip,closed_protocol,port)) 
                                                except Exception as e:
                                                        pass
                                        for crange in closed_ports.split(","):
                                                try:
                                                        cur.execute("INSERT INTO closedports (ip,protocol,range) values (?,?,?)",(ip,closed_protocol,crange)) 
                                                except Exception as e:
                                                        pass
                
                # Hostnames into database
                if hostname:
                        for name in hostname:
                                try:
                                        cur.execute("INSERT INTO hostnames (hostname,ip) VALUES (?,?)",(str(name),ip))
                                except:
                                        pass
                
                # OS Match into database
                if osmatch:
                        for name,accuracy in osmatch:
                                try:
                                        cur.execute("INSERT INTO osmatch (name,accuracy,ip) VALUES (?,?,?)",(str(name),str(accuracy),ip))
                                except Exception as e:
                                        pass

                # Work through each port in the nmap output
                for openport in host.iter('port'):
                        port = openport.attrib['portid']
                        protocol = openport.attrib['protocol']
                        state = openport.find("./state").attrib['state']
                        try: service = openport.find("./service").attrib['name']
                        except: service = "empty"
                        try: tunnel = openport.find("./service").attrib['tunnel']
                        except: tunnel="none"
                        try: product = openport.find("./service").attrib['product'] 
                        except: product=""
                        try: productversion = openport.find("./service").attrib['version']
                        except: productversion=""

                        # Scripts
                        for script in openport.findall('script'):
                                sid = script.attrib['id']
                                soutput = script.attrib['output']
                                try:
                                        cur.execute("INSERT INTO scripts (id,ip,port,output) VALUES (?,?,?,?)",(sid,ip,port,soutput))
                                except Exception as e:
                                        pass

                         #enter into db
                        if state == "open":
                                dbtable = "openports"
                                try:
                                        cur.execute("INSERT INTO "+dbtable+" (ip,port,protocol,service,tunnel,version) values (?,?,?,?,?,?)",(ip,port,protocol,service,tunnel,product+' '+productversion)) 
                                except:
                                        pass
                        elif state == "closed":
                                dbtable = "closedports"
                                try:
                                        cur.execute("INSERT INTO "+dbtable+" (ip,port,protocol) values (?,?,?)",(ip,port,protocol)) 
                                except:
                                        pass
                        if state in ["open","closed"]:
                                try:
                                        cur.execute("UPDATE scope set live = 1 where ip = ?",(ip,))
                                except Exception as e:
                                        print(e)
                
        con.commit()
        con.close()

# Gets hostnames from an IP
def gethostnames(ip):
        con=lite.connect(db)
        con.row_factory = lite.Row
        cur = con.cursor()
        hostnamelist = []
        try:
                response = cur.execute("select hostname from hostnames where ip='"+ip+"';").fetchall()
                for row in response:
                        hostnamelist.append(row['hostname'])
        except:
                pass
        return(hostnamelist)


# Finds any port with SSL listening and adds them to the service array       
def findssl():
        print("[+] SSL port identification")
        con=lite.connect(db)
        con.row_factory = lite.Row
        cur = con.cursor()
        cur.execute('select ip,port from openports where (tunnel="ssl" OR service like "%https%") and protocol="tcp";')
        ssldb = cur.fetchall()
        if ssldb:
                nowlist=[]
                for row in ssldb:
                        ip = row['ip']
                        port = str(row['port'])
                        nowlist.append(ip+":"+port)
                        hnlist = gethostnames(ip)
                        for hn in list(hnlist):
                                nowlist.append(hn+":"+port)
                servicearray['sslport']={"tcp": nowlist}
                print("     [*] Found "+str(len(nowlist))+" SSL ports")

# Finds any closed ports and adds them to the service array
def findclosed():
        print("[+] Closed port identification")
        con=lite.connect(db)
        con.row_factory = lite.Row
        cur = con.cursor()
        cur.execute('select ip,protocol,range from closedports where port is null;')
        closeddb = cur.fetchall()
        if closeddb:
                nowlist=[]
                for row in closeddb:
                        cip = row['ip']
                        crange = row['range']
                        cprotocol = row['protocol'].upper()
                        string = cip+";"+cprotocol+";"+str(crange)+";"
                        nowlist.append(string)
                servicearray['closed ranges']={"": nowlist}
                print("     [*] Found "+str(len(nowlist))+" closed ranges")
        cur.execute('select ip,protocol,port from closedports where range is null;')
        closeddb = cur.fetchall()
        if closeddb:
                nowlist=[]
                for row in closeddb:
                        cip = row['ip']
                        cport = row['port']
                        cprotocol = row['protocol'].upper()
                        string = cip+";"+cprotocol+";"+str(cport)+";"
                        nowlist.append(string)
                servicearray['closed ports']={"": nowlist}
                print("     [*] Found "+str(len(nowlist))+" closed ports")

# Identifies HTTP and HTTPS and put them into the service array
def findhttp():
        print("[+] HTTP and HTTPS identification")
        con=lite.connect(db)
        con.row_factory = lite.Row
        cur = con.cursor()
        cur.execute('SELECT ip,port,service,tunnel FROM openports WHERE service like "%http%" and protocol="tcp";')
        httpdb=cur.fetchall()
        httplist=[]
        httpslist=[]
        if httpdb:
                for row in httpdb:
                        row_service = row['service']
                        tunnel = row['tunnel']

                        if "https" in row_service:
                                service = "https"
                        elif "http" in row_service and tunnel == "ssl":
                                service = "https"
                        elif "http" in row_service and "https" not in row_service:
                                service = "http"
                        ip = row['ip']
                        port = str(row['port'])
                        if service == "http":
                                httplist.append(ip+":"+port)
                        if service == "https":
                                httpslist.append(ip+":"+port)
                        hnlist = gethostnames(ip)
                        for hn in list(hnlist):
                                if service == "http":
                                        httplist.append(hn+":"+port)
                                if service == "https":
                                        httpslist.append(hn+":"+port)
                servicearray["http"]={"tcp": httplist}
                servicearray["https"]={"tcp": httpslist}
                print("     [*] Found "+str(len(httplist)+len(httpslist))+" HTTP/HTTPS ports (including hostnmes)")

def findservices():
        global servicearray
        print("[+] Enumerating services")
        con=lite.connect(db)
        cur = con.cursor()
        cur.execute('SELECT distinct service,protocol FROM openports;')
        servicelist = cur.fetchall()
        for service,protocol in servicelist:
                if "http" not in service:
                                cur.execute('SELECT ip ||":"|| port FROM openports WHERE service="'+service+'"and protocol="'+protocol+'";')
                                hostports=cur.fetchall()
                                nowlist=[]
                                if service not in servicearray:
                                                servicearray[service]={}
                                for line in hostports:
                                                nowlist.extend(line)
                                servicearray[service][protocol]=nowlist
        print("     [*] Found "+str(len(servicelist))+" distinct services")
        findssl()
        findhttp()
        guesshttp()
        findclosed()

# Tries to work out if an unknown service is http or https
def guesshttp():
        import requests,urllib3
        urllib3.disable_warnings(category=urllib3.exceptions.InsecureRequestWarning)
        global servicearray
        
        # Get all Services from DB
        print("[+] Identifying unknown services and trying to work out if they're actually HTTP or HTTPS")
        guessedhttp = []
        guessedhttps = []
        con=lite.connect(db)
        cur = con.cursor()
        cur.execute('SELECT distinct service,protocol FROM openports;')
        servicelist = cur.fetchall()
        for service,protocol in servicelist:
                if isknownservice(service) is False and protocol == "tcp" and "http" not in service:
                        responses = []
                        nowlist = []
                        print("         "+service+"?")
                        cur.execute('SELECT ip ||":"|| port FROM openports WHERE service="'+service+'"and protocol="'+protocol+'";')
                        hostports=cur.fetchall()
                        for line in hostports:
                                nowlist.extend(line)
                                address = line[0]
                                try:
                                        x = requests.get('http://'+address)
                                        responses.append("http")
                                except:
                                        x = requests.get('https://'+address, verify=False)
                                        responses.append("https")
                
                        if set(responses) == {'http'}:
                                print("         [!]"+service+ " is HTTP")
                                guessedhttp.extend(nowlist)
                        elif set(responses) == {"https"}:
                                print("         [!]"+service+ " is HTTPS")
                                guessedhttps.extend(nowlist)
        if len(guessedhttp) > 0:
                servicearray['guessedhttp']={}
                servicearray['guessedhttp']['tcp']=guessedhttp
        if len(guessedhttps) > 0:
                servicearray['guessedhttps']={}
                servicearray['guessedhttps']['tcp']=guessedhttps
                servicearray['sslport']['tcp'].extend(guessedhttps)

# Writes the services out as an array to file
def outputarray():
        obfile = open (os.path.join(args.output,svcarrayfile), 'w')
        obfile.write(str(servicearray))
        obfile.close



# Writes the output to files                        
def outputfiles():
        location = args.output
        servicedir = os.path.join(location, svcfolder)
        try:
                os.mkdir(servicedir)
        except OSError:
                print("[!] Output folder already exists- overwriting")
                pass
        for service in servicearray:
                for protocol,hostports in servicearray[service].items():
                        if len(hostports) > 0:
                                protocoldir = os.path.join(servicedir,protocol)
                                try: os.mkdir(protocoldir)
                                except: pass
                                filename=service.replace('/','_')+'.service'
                                bonusname = ""
                                if service=="sslport":
                                        filename="ssl.host"
                                elif service=="https":
                                        bonusname="webapp.url.https"
                                        prefix="https://"
                                elif service=="http":
                                        bonusname="webapp.url.http"
                                        prefix="http://"
                        
                                sfile = open (os.path.join(protocoldir, filename), 'w')
                                for line in hostports:
                                        sfile.write(str(line)+"\n")
                                if bonusname != "":
                                        sfile = open (os.path.join(protocoldir, bonusname), 'w')
                                        for line in hostports:
                                                sfile.write(prefix+str(line)+"\n")
                                        sfile.close

        # Makes a directory for informational output
        infodir = os.path.join(location, "info")
        try:
                os.mkdir(infodir)
        except:
                pass

        # Write the ports for nessus/nmap to file
        con=lite.connect(db)
        con.row_factory = lite.Row
        cur = con.cursor()
        port_list = cur.execute('SELECT distinct port,protocol from openports;').fetchall()
        if port_list:
                tcplist=[]
                udplist=[]
                for row in port_list:
                        port = str(row['port'])
                        protocol = row['protocol']
                        if protocol == "tcp":
                                tcplist.append(port)
                        elif protocol == "udp":
                                udplist.append(port)
                                
                openfile = open (os.path.join(infodir,"nessus.ports"), 'w')
                if tcplist:
                        openfile.write("T:"+",".join(tcplist))
                if tcplist and udplist:
                        openfile.write(",")
                if udplist:
                        openfile.write("U:"+",".join(udplist))
                openfile.close()
        
        # Writes live IPs to file
        con=lite.connect(db)
        con.row_factory = None
        con.text_factory = str
        cur = con.cursor()
        ip_list = cur.execute('select distinct ip from openports union select distinct ip from closedports;').fetchall()
        openfile = open (os.path.join(infodir,"live.ips"), 'w')
        for ip in ip_list:
                openfile.write(''.join(ip)+"\n")
        openfile.close()

        # Writes plaintext protocols
        nonplaintextservices = ['ssh','isakmp','ms-wbt-server']
        con=lite.connect(db)
        con.row_factory = None
        con.text_factory = str
        cur = con.cursor()
        ip_list = cur.execute('select ip,protocol,port,service from openports where tunnel=\'none\' and service != \'tcpwrapped\';').fetchall()
        openfile = open (os.path.join(infodir,"plaintext.ports"), 'w')
        for line in ip_list:
                ip = line[0]
                proto = line[1]
                port = str(line[2])
                service = str(line[3])
                if service not in nonplaintextservices:
                        openfile.write(ip+";"+proto+";"+port+";:"+service+"\n")
        openfile.close()

        # Write OS matches and identified software versions to file
        con=lite.connect(db)
        con.row_factory = lite.Row
        cur = con.cursor()
        ip_list = cur.execute('SELECT distinct ip from openports;').fetchall()
        for row in ip_list:
                ip = row['ip']
                osmatches = cur.execute('SELECT name,accuracy FROM osmatch where ip="'+str(ip)+'";').fetchall()
                port_list = cur.execute('SELECT port,protocol,version from openports where version!=NULL and ip="'+str(ip)+'";').fetchall()
                if osmatches or port_list:
                        openfile = open (os.path.join(infodir,ip+".info"), 'w')
                if osmatches:
                        openfile.write("OS Matches\n")
                        for name,accuracy in osmatches:
                                openfile.write(str(accuracy)+"%  : "+name+"\n")
                        openfile.write("\n\n")
                if port_list:
                        openfile.write("Detected Software Versions\n")
                        for port,protocol,version in port_list:
                                if version != " ":
                                        openfile.write(str(port)+"/"+protocol+"     "+version+"\n")
                                        
        # Writes script output to files
        con=lite.connect(db)
        con.row_factory = lite.Row
        cur = con.cursor()
        ip_list = cur.execute('SELECT distinct ip from scripts;').fetchall()
        if ip_list:
                scriptdir = os.path.join(location, "scripts")
                try:
                        os.mkdir(scriptdir)
                except:
                        pass
                for row in ip_list:
                        ip = row['ip']
                        script_list = cur.execute('SELECT id,port,output from scripts where ip="'+ip+'";').fetchall()
                        ipdir = os.path.join(scriptdir, str(ip))
                        os.mkdir(ipdir)
                        for id,port,output in script_list:
                                openfile = open (os.path.join(ipdir,str(id)), 'w')
                                openfile.write(ip+":"+str(port)+"\n\n")
                                openfile.write(str(output)+"\n")
                                openfile.close

def filehandler(arginput):
        if os.path.isfile(arginput):
                xmlimport(arginput)
        elif os.path.isdir(arginput):
                for xmlfile in os.listdir(arginput):
                        if xmlfile.endswith('.xml'):
                                xmlimport(os.path.join(args.xml ,xmlfile))

def test_parsefile(infile):
        with open(infile) as f:
                response = ast.literal_eval(f.read())
                return response



def isknownservice(service):
        modulepath=str(os.path.dirname(os.path.realpath(__file__)))+"/modules/"
        if os.path.exists(modulepath+service):  
                return True
        else:
                return False




def test():
        import sys,os,argparse,ast
        from shutil import which
        testlist="./testlist"
        servicearrayfile = os.path.join(args.directory,svcarrayfile)
        modulepath=str(os.path.dirname(os.path.realpath(__file__)))+"/modules/"
        queuefile="CABO.sh"
        successlog="cmd.success.log"
        faillog="cmd.fail.log"
        mkdirqueue=[]
        cmdqueue=[]
        invalid_commands = []
        interpreter_commands = []
        valid_commands = []

        paths_dict = load_paths_json() #template rendering --josh

        with open(servicearrayfile) as f:
                response = ast.literal_eval(f.read())
                servicearray = response


        for service in servicearray:
                tests=""
                guessedhttp=False
                if os.path.exists(modulepath+service):  
                        try:
                                tests=test_parsefile(modulepath+service)
                                print(("[+] Found tests for "+service))
                        except Exception as e:
                                print("[!] Error processing "+service+" module: "+str(e))

                for test in tests:
                        testlist=tests[test]
                        testtype=testlist[0]
                        outputfolder=testlist[1]
                        testcommand=testlist[2]
                        testprotocol=testlist[3]
                        testexe = testcommand.split(" ")[0]

                        # try config overrides first
                        candidate_exe = None
                        if isinstance(paths_dict, dict):
                            token = testlist[1].lower()
                            candidate_exe = paths_dict.get(token) \
                                            or paths_dict.get("paths", {}).get(token) \
                                            or paths_dict.get("tools", {}).get(token)

                        # fallback
                        if not candidate_exe:
                            try:
                                builtins_min = {"DIR":".","HOST":"HOST","IP":"IP","PORT":"PORT","PROTO":"PROTO"}
                                rendered = render_cmd(testcommand, builtins_min, paths_dict)
                                candidate_exe = rendered.split()[0]
                            except Exception:
                                candidate_exe = testexe

                        # check absolute path or search PATH
                        exe = None
                        if os.path.isabs(candidate_exe):
                            if os.path.isfile(candidate_exe) and os.access(candidate_exe, os.X_OK):
                                exe = candidate_exe
                        else:
                            exe = which(candidate_exe)

                        interpreters = ['perl','python']

                        if exe is None:
                            invalid_commands.append(test)
                        elif os.path.basename(exe) in interpreters:
                            interpreter_commands.append(test)
                        else:
                            valid_commands.append(test)
 
                        #if exe is not None and exe.split("/")[-1] in interpreters:
                        #       print("[!] Interpreter detected for "+test+". Make sure the script exists.")
                        
                        if exe is not None and args.check is False:
                                print(("[*] Adding "+test+" to the queue"))
                                mkdirqueue.append("mkdir "+outputfolder)        
                                cmdcount = len(servicearray[service][testprotocol])
                                cmdqueue.append("echo \"[+] Running "+test+"- "+str(cmdcount)+" instances\"")       
                                icmd = 1
                                for host in servicearray[service][testprotocol]:
                                        if service in ["http","guessedhttp"]:
                                                proto="http"
                                        elif service in ["https","guessedhttps"]:
                                                proto="https"
                                        else:
                                                proto="tcp"
                                        hostip=host.split(":")[0]
                                        hostport=host.split(":")[1]
                                        
                                        countstr = "    "+test+" ("+str(icmd)+"/"+str(cmdcount)+")"

                                        default_templates = {
                                            "DIR":   outputfolder,
                                            "HOST":  host,
                                            "IP":    hostip,
                                            "PORT":  hostport,
                                            "PROTO": proto,
                                        }

                                        #iterate over dict
                                        towriteout = render_cmd(testcommand, default_templates, paths_dict)

                                        cmdqueue.append("echo \'"+countstr+"\' ;"+towriteout+" && echo '"+towriteout+"' >> ./"+successlog+" || echo '"+towriteout+"' >> ./"+faillog)
                                        icmd +=1
                                cmdqueue.append("echo \"[*] Completed "+test+"\"")  


        with open(queuefile, "w") as f:
                f.write("#!/bin/parallel --shebang\n")
                for line in mkdirqueue:
                        f.write(line+"\n")
                for line in cmdqueue:
                        f.write(line+"\n")
                if invalid_commands and args.check is False:
                        print("[!] Some commands were not found in your $PATH and not added to the script. Please run a check and correct if required.")
        if args.check is True:
                if valid_commands:
                        print("[*] The following commands have been found in your $PATH: \n * "+"\n * ".join(set(valid_commands)))
                if interpreter_commands:
                        print("[*] The following commands use interpreters and the scripts location should be checked: \n       * "+"\n * ".join(set(interpreter_commands)))
                if invalid_commands:
                        print("[!] The following commands cannot be found in your $PATH: \n * "+"\n * ".join(set(invalid_commands)))
 


if __name__ == "__main__":
        try:
                args.dest
        except:
                parser.print_help(sys.stderr)
                print("\n Please select a subcommand")
                exit(1)
        if args.dest == "parse":
                db = os.path.join(args.output, dbfile)
                global servicearray
                servicearray = {}
                filehandler(args.xml)
                findservices()
                outputarray()
                outputfiles()
        elif args.dest == "status":
                nmap_xml_monitor(args.directory)
        elif args.dest == "test":
                test()
        elif args.dest == "scope":
                db = os.path.join(args.output, dbfile)
                scope_generator(args.input)
        elif args.dest == "scan":
                db = os.path.join(args.output, dbfile)
                if args.no_discovery is True:
                        fullnmapscan("all")
                else:
                        arpscantargets = findlocalranges()
                        arpscan(arpscantargets)
                        discoveryscan()
                        top20scan()